datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  role      Role      @default(STUDENT)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  payments  Payment[]     // ðŸ”¹ back-relation for Video payments
  kitPurchases KitPurchase[] // ðŸ”¹ back-relation for Kit purchases
}

model Video {
  id            String    @id @default(uuid())
  title         String
  subtitle      String?
  description   String
  category      String
  difficulty    String?
  paymentMethod String
  price         Float?
  uploadId      String
  playbackId    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) // âœ… add default for existing rows

  payments      Payment[]
  kits          KitVideo[]
}

model Payment {
  id        String        @id @default(cuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  video     Video         @relation(fields: [videoId], references: [id])
  videoId   String
  proofUrl  String
  amount    Float?        // âœ… New field for payment amount
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model PaymentSettings {
  id        String   @id @default(cuid())
  mobileMoneyAccount    String?
  mobileMoneyOwner      String?
  mobileMoneyInstructions String?
  cryptoAccount         String?
  cryptoOwner           String?
  cryptoInstructions    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Kit {
  id        String        @id @default(cuid())
  name      String
  price     Float
  thumbnail String        // URL of uploaded thumbnail
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  createdBy String?       // optional, link to Admin who created it

  videos    KitVideo[]    // relation to videos included in kit
  purchases KitPurchase[] // relation to kit purchases
}

model KitVideo {
  id      String @id @default(cuid())
  kitId   String
  videoId String

  kit     Kit   @relation(fields: [kitId], references: [id], onDelete: Cascade)
  video   Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model KitPurchase {
  id        String        @id @default(cuid())
  userId    String
  kitId     String
  proofUrl  String
  status    PaymentStatus @default(PENDING)
  amount    Float?        // optional: store paid amount
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  kit  Kit  @relation(fields: [kitId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  STUDENT
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
}
